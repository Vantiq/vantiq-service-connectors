import org.gradle.internal.os.OperatingSystem

plugins {
    id 'ru.vyarus.use-python' version '3.0.0'
}

apply plugin: 'base'

ext {
    if (project.rootProject.hasProperty('pypi_repo')) {
        pypi_repo = project.rootProject.findProperty('pypi_repo')
    } else {
        pypi_repo = 'testpypi'
    }
    if (!project.rootProject.hasProperty('vantiqServiceSdkVersion')) {
        vantiqServiceSdkVersion = '0.0.4'
    }
    
    // See if we are using virtualenvwrapper and if so put the virtualenv in the WORKON_HOME
    if (System.getenv('WORKON_HOME')) {
        virtualenvPath = System.getenv('WORKON_HOME') + "/vantiqservicesdk"
    }

    String depList = ''
    project.file('requirements-sdk.in').eachLine { dep ->
        if (depList.length() > 0) {
            depList += ",\n"
        }
        depList += '    "' + dep + '"'
    }
    vantiqServiceSdkDeps = depList
}

python {
    // python binary name (python or python3 by default)
    pythonBinary
    // path to python binary (global by default)
    pythonPath
    // Let pip parse the requirements to txt file
    // use-python plugin has issues with more complex requirements.txt specifications
    requirements.strict = false
    // additional environment variables, visible for all python commands
    // Note: We specify the directory paths to search in the pytest.ini file
    environment = [:]

    // minimal required python version (m.m.m)
    minPythonVersion = '3.8'
    // minimal required pip version (m.m.m)
    minPipVersion = '9'

    // show all installed modules versions after pip installation
    showInstalledVersions = true
    // always call module install, even if correct version is already installed
    alwaysInstallModules = false
    // may be used to disable pip cache (--no-cache-dir option)
    usePipCache = true
    // additional pip repositories (--extra-index-url option)
    extraIndexUrls = []
    // trusted hosts for pip install (--trusted-host option)
    trustedHosts = []

    // pip modules installation scope (project local, os user dir, global)
    //noinspection GroovyAssignabilityCheck
    scope = VIRTUALENV_OR_USER
    // automatically install virtualenv module (if pip modules declared and scope allows)
    installVirtualenv = true
    // if virtualenv not installed (in --user scope), plugin will install exactly this version
    // (known to be working version) to avoid side effects
    virtualenvVersion = '20.4.2'
    // minimal required virtualenv (v20 is recommended, but by default 16 set to not fail previous
    // setups)
    minVirtualenvVersion = '20'
    // used virtualenv path (if virtualenv used, see 'scope')
    if (project.hasProperty('virtualenvPath')) {
        envPath = virtualenvPath
    } 
    
    // copy virtualenv instead of symlink (when created)
    envCopy = false
}

tasks.register('generateRequirements', PythonTask) {
    inputs.files('requirements-build.in', 'requirements-sdk.in')
    outputs.file('requirements.txt')
    module = 'piptools'
    command = 'compile requirements-build.in requirements-sdk.in --unsafe-package py -o requirements.txt'
}

tasks.register('pytest', PythonTask) {
    outputs.upToDateWhen { false }
    module = 'pytest'
}

tasks.register('generateProjectCfg', Copy) {
    outputs.upToDateWhen { false }
    into project.projectDir
    from 'src/main/templates'
    include '**/pyproject.toml.tmpl'
    expand(vantiqServiceSdkVersion: vantiqServiceSdkVersion, vantiqServiceSdkDeps: vantiqServiceSdkDeps)
    rename ~/(.*)\.tmpl/, '$1'
}

tasks.register('build_distribution', PythonTask) {
    String osName = OperatingSystem.current().getName()
    String osVersion = OperatingSystem.current().getVersion()
    println "*** $osName $osVersion was detected."

    if (!OperatingSystem.current().isLinux()) {
        // Consider Linux.

        module = 'build'
    } else {
        command = "-c print('Warning: build_distribution not supported on this platform')"
    }
}

build_distribution.dependsOn generateProjectCfg

tasks.register('publish', PythonTask) {
    command = "upload --verbose -r ${pypi_repo} dist/*"
    module = 'twine'
}

publish.mustRunAfter build_distribution
publish.dependsOn generateProjectCfg
publish.dependsOn assemble

// Note: pytest must run AFTER the 'test' task.  That task prepares (i.e. deletes) the directory
// into which the results are to be placed.  Because of that, if pytest runs later, its results
// are deleted.
tasks.register('test')
test.finalizedBy pytest
assemble.finalizedBy build_distribution

// delete all the generated files.
tasks.register('pyclean', Delete) {
    delete "${project.projectDir}/dist"
    delete "${project.projectDir}/pyproject.toml"
}

clean.dependsOn pyclean

// Make every other task run after the generateProjectCfg task.  This way, they run first and the
// gradle dependency analyzer remains happy.
// matching() and all() are "live" so any tasks declared after this line will also depend on generate*
tasks.matching { !it.name.startsWith('generate')
        && it.name != 'pyclean'
        && it.name != 'clean' }.configureEach { task ->
    task.mustRunAfter generateProjectCfg
}