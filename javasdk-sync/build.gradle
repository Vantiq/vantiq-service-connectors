plugins {
    id 'java'
}

version = 'unspecified'

apply plugin: 'com.github.johnrengelman.shadow'

repositories {
    mavenCentral()
}

ext {
    vertxVersion = "4.4.1"
    jacksonVersion = "2.14.2"
    junitJupiterVersion = "5.9.1"
}

configurations {
    scTest.extendsFrom testImplementation
}

dependencies {
    implementation(platform("io.vertx:vertx-stack-depchain:$vertxVersion"))
    implementation("io.vertx:vertx-core")
    implementation("io.vertx:vertx-web")
    implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}")
    implementation("com.google.guava:guava:31.1-jre") {
        constraints {
            implementation('com.google.errorprone:error_prone_annotations:2.18.0') {
                because 'to avoid duplicate versions'
            }
        }
    }
    implementation("org.apache.commons:commons-lang3:3.12.0")
    implementation("org.projectlombok:lombok:1.18.26")
    implementation("org.slf4j:slf4j-api:1.7.36")
    implementation("ch.qos.logback:logback-classic:1.2.10")

    testImplementation("io.vertx:vertx-junit5")
    testImplementation("org.junit.jupiter:junit-jupiter:$junitJupiterVersion")
    // need this even though the configuration extends testImplementation, otherwise the test shadow jar won't have the
    // project classes in it
    scTest project(':javasdk-sync')
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

task testJar(type: ShadowJar) {
    archiveClassifier.set("tests")
    from sourceSets.test.output
    configurations = [project.configurations.scTest]

    manifest {
        attributes 'Main-Verticle': 'io.vantiq.svcconnector.MainVerticle'
        attributes 'Main-Command': 'run'
        attributes 'Main-Class': 'io.vantiq.testServiceConnector.TestSvcConnectorMain'
    }
    zip64 true
}
